import 'package:flutter/material.dart';
import 'db_helper.dart';
import 'package:provider/provider.dart';
import 'theme_provider.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  List<Map<String, dynamic>> allNotes = [];
  DBHelper? dbRef;

  TextEditingController cc_title = TextEditingController();
  TextEditingController cc_dec = TextEditingController();

  bool isLoading = true;

  String msg = "";

  @override
  void initState() {
    super.initState();
    dbRef = DBHelper.getInstance();
    getNotes();
  }

  void getNotes() async {
    setState(() {
      isLoading = true;
    });

    allNotes = await dbRef!.getAllNotes();
    setState(() {
      isLoading = false;
    });
  }

  void _showThemeBottomSheet() {
    final themeProvider = Provider.of<ThemeProvider>(context, listen: false);

    showModalBottomSheet(
      context: context,
      builder: (context) => Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          ListTile(
            leading: const Icon(Icons.light_mode),
            title: const Text("Light Theme"),
            onTap: () {
              themeProvider.toggleTheme(false);
              Navigator.pop(context);
            },
          ),
          ListTile(
            leading: const Icon(Icons.dark_mode),
            title: const Text("Dark Theme"),
            onTap: () {
              themeProvider.toggleTheme(true);
              Navigator.pop(context);
            },
          ),
        ],
      ),
    );
  }

  void showNoteBottomSheet({bool isUpdate = false, int? id}) {
    setState(() {
      msg = "";
    });

    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setModalState) {
            return Padding(
              padding: MediaQuery.of(context).viewInsets,
              child: Container(
                padding: const EdgeInsets.all(16),
                height: MediaQuery.of(context).size.height * 0.55,
                width: double.infinity,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text(
                      isUpdate ? "Update Note" : "Add Note",
                      style: const TextStyle(
                        fontSize: 25,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 21),
                    TextField(
                      controller: cc_title,
                      decoration: InputDecoration(
                        hintText: "Enter Title Here",
                        label: const Text("*Title"),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(11),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(11),
                        ),
                      ),
                    ),
                    const SizedBox(height: 11),
                    TextField(
                      controller: cc_dec,
                      maxLines: 4,
                      decoration: InputDecoration(
                        hintText: "Enter Description Here",
                        label: const Text("*Desc"),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(11),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(11),
                        ),
                      ),
                    ),
                    const SizedBox(height: 11),
                    Row(
                      children: [
                        Expanded(
                          child: OutlinedButton(
                            style: OutlinedButton.styleFrom(
                              side: const BorderSide(width: 1),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(11),
                              ),
                            ),
                            onPressed: () async {
                              var title_dummy = cc_title.text.trim();
                              var desc_dummy = cc_dec.text.trim();

                              if (title_dummy.isNotEmpty && desc_dummy.isNotEmpty) {
                                bool check = false;

                                if (isUpdate && id != null) {
                                  check = await dbRef!.updatenote(
                                    id: id,
                                    title: title_dummy,
                                    des: desc_dummy,
                                  );
                                } else {
                                  check = await dbRef!.addNote(
                                    mtitle: title_dummy,
                                    mdesc: desc_dummy,
                                  );
                                }

                                if (check) {
                                  getNotes();
                                  Navigator.pop(context);
                                } else {
                                  setModalState(() {
                                    msg = "*Something went wrong!";
                                  });
                                }
                              } else {
                                setModalState(() {
                                  msg = "*Please Fill All the Required Blanks";
                                });
                              }
                            },
                            child: Text(isUpdate ? "Update Note" : "Add Note"),
                          ),
                        ),
                        const SizedBox(width: 11),
                        Expanded(
                          child: OutlinedButton(
                            style: OutlinedButton.styleFrom(
                              side: const BorderSide(width: 1),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(11),
                              ),
                            ),
                            onPressed: () {
                              Navigator.pop(context);
                            },
                            child: const Text("Cancel"),
                          ),
                        ),
                      ],
                    ),
                    if (msg.isNotEmpty)
                      Padding(
                        padding: const EdgeInsets.only(top: 8.0),
                        child: Text(
                          msg,
                          style: const TextStyle(
                            color: Colors.red,
                            fontSize: 14,
                          ),
                        ),
                      ),
                  ],
                ),
              ),
            );
          },
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Notes'),
        actions: [
          PopupMenuButton<String>(
            onSelected: (value) {
              if (value == "theme") {
                _showThemeBottomSheet();
              }
            },
            itemBuilder: (context) => const [
              PopupMenuItem(
                value: "theme",
                child: Text("Theme"),
              ),
            ],
          ),
        ],
      ),
      body: isLoading
          ? const Center(child: CircularProgressIndicator())
          : allNotes.isNotEmpty
          ? ListView.builder(
        itemCount: allNotes.length,
        itemBuilder: (context, index) {
          final note = allNotes[index];
          return ListTile(
            leading: Text('${index + 1}'),
            title: Text(note[DBHelper.COLUMN_NOTE_TITLE]),
            subtitle: Text(note[DBHelper.COLUMN_NOTE_DESC]),
            trailing: Padding(
              padding: const EdgeInsets.all(15.0),
              child: SizedBox(
                width: 56,
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    InkWell(
                      onTap: () {
                        cc_title.text = note[DBHelper.COLUMN_NOTE_TITLE];
                        cc_dec.text = note[DBHelper.COLUMN_NOTE_DESC];
                        showNoteBottomSheet(
                          isUpdate: true,
                          id: note[DBHelper.COLUMN_NOTE_SNO],
                        );
                      },
                      child: const Icon(Icons.edit),
                    ),
                    const SizedBox(width: 8),
                    InkWell(
                      onTap: () async {
                        await dbRef!.deletenote(id: note[DBHelper.COLUMN_NOTE_SNO]);
                        getNotes();
                      },
                      child: const Icon(Icons.delete, color: Colors.red),
                    ),
                  ],
                ),
              ),
            ),
          );
        },
      )
          : const Center(child: Text("No Notes Yet!")),

      floatingActionButton: FloatingActionButton(
        onPressed: () {
          cc_title.clear();
          cc_dec.clear();
          msg = "";
          showNoteBottomSheet(isUpdate: false);
        },
        child: const Icon(Icons.add),
      ),
    );
  }
}
